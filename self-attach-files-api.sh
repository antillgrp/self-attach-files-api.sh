#!/bin/bash
####################################################################################################
  #
  # Date: 05/21/2024
  # Author: Gerson Ramirez
  # Version: 1.0
  # Description: 
  #
  # The API on this bash script is designed to self-attach additional files to itself. 
  # It allows the user to easily attach supplementary files to the script, such as 
  # configuration files or binary (executable), without altering the original script 
  # file. This can be useful for keeping all related files together and ensures that 
  # the script remains self-contained.
  # 
  # Usage:
  #
  # 1. This scritp uses bash ($BASH_VERSION) 5.X
  #
  # 2. Copy the functions of this script and paste it in your script right bellow the 
  # shebang (#!/bin/bash). At first run the script itself will setup the file store 
  #  
  # 3. The code generated by this script on top can't be move out of those lines, and 
  # the code generated at the end of this script can't be deleted, neither more code 
  # added after it, if so, that code will never execute.
  #
  # 4. To delete all the files, just delete second, third, and forth lines, additionally 
  # delete all the lines at the botton from "exit 0" ahead
  #
####################################################################################################

echoerr() { NO_COLOR='\033[0m' && Red='\033[0;31m' && Yellow='\033[0;33m' && echo -e "${Red}ERROR!:${NO_COLOR}" "${Yellow}" "${@}" "${NO_COLOR}" 1>&2; }

TARGET_SSCRIPT="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"  && sed -i 's/\r$//' "$TARGET_SSCRIPT"

makeSureStoreDeclared(){ # Make sure file store is declared
  [[ $(declare -p EMBEDED_FILES_ARR 2>&1) == *"not found"* ]]                                                         &&
  sed -i "2 i $(printf -- "#%.0s" {1..100}})\n" "$TARGET_SSCRIPT"                                                     && 
  sed -i "2 i ### FILES STORE ### !!! DO NOT DELETE THE LINE ABOVE !!!" "$TARGET_SSCRIPT"                             && 
  sed -i "2 i declare -a EMBEDED_FILES_ARR=()"  "$TARGET_SSCRIPT"                                                     && 
  sed -i "2 i $(printf -- "#%.0s" {1..100}})" "$TARGET_SSCRIPT"                                                       && 
  echoerr "makeSureStoreDeclared: file store not declared, fixed!, please run the script again."                      && 
  exec >> "$TARGET_SSCRIPT"                                                                                           &&
  printf -- "#%.0s" {1..100}} && echo                                                                                 && 
  echo 'exit 0; ### !!! DO NOT DELETE THIS LINE, NEITHER WRITE CODE BEYOND IT, IT WILL NEVER EXEC !!! ######'         &&
  printf -- "#%.0s" {1..100}} && echo                                                                                 &&
  exit 1                                                                                                              ;

  return 0
}

#returns 0 if found, 1 if not found
fileIsEmbededAlready(){
  makeSureStoreDeclared
  
  FNAME_TO_EMBED=$1 

  for fName in "${EMBEDED_FILES_ARR[@]}"; do [[ "$fName" == "${FNAME_TO_EMBED}" ]] && return 0; done 
  
  return 1
}

attachFileToThisScript(){
  makeSureStoreDeclared
  
  FNAME_TO_EMBED=$1 && if [[ -f $FNAME_TO_EMBED ]]; then sed -i 's/\r$//' "$FNAME_TO_EMBED"; else  echoerr "attachFileToThisScript: target file [$FNAME_TO_EMBED] not found"; return 1; fi
  
  # Check if file is attached already  
  fileIsEmbededAlready "${FNAME_TO_EMBED}" && echoerr "attachFileToThisScript: file [$FNAME_TO_EMBED] has been previously attached" && return 1;  
  
  # Attaching logic (hard coding)
  HARDCODE=" \'$FNAME_TO_EMBED\'" && sed -i "3s/)/$HARDCODE)/" "$TARGET_SSCRIPT"                                      && # hardcoding to store
  ATTACHMENT="[$FNAME_TO_EMBED]=$(base64 --wrap=0 "$FNAME_TO_EMBED")"                                                 && # Attaching
  echo "$ATTACHMENT" >> "$TARGET_SSCRIPT"                                                                             &  # <-- back ground  
  p=$! && echo -n "Attaching [$FNAME_TO_EMBED] "                                                                      && # Animation 
  tput civis                                                                                                          && # Cursor off
  while ps $p > /dev/null; do for c in ◷ ◶ ◵ ◴; do printf "$c" ; sleep 0.1 ; printf "\b"; done; done; printf "\b\n" && # \\ "|" / "-"
  tput cvvis                                                                                                          && # Cursor on
  EMBEDED_FILES_ARR+=("$FNAME_TO_EMBED")                                                                              && # add to run time store
  fileIsEmbededAlready "$FNAME_TO_EMBED" && return 0 || return 1    
}

 
printBase64FromAttachedFile(){
  makeSureStoreDeclared 
  
  FNAME_TO_SEARCH=$1 

  fileIsEmbededAlready "$FNAME_TO_SEARCH"                                           && 
  echo "$(grep "^\[$FNAME_TO_SEARCH\]" "$TARGET_SSCRIPT" | head -1 | cut -d= -f2)"  && 
  return 0                                                                          ;
  
  echoerr "printBase64FromAttachedFile: file [$FNAME_TO_SEARCH] does not seen to be attached." && return 1;
}

####################################################################################################
